@model IEnumerable<CateringPro.Models.Docs>
@inject CateringPro.Core.SharedViewLocalizer Localizer
@using CateringPro.Core


@{
    QueryModel querymodel = ViewData["QueryModel"] as QueryModel;
    if (querymodel == null)
    {
        querymodel = new QueryModel();
    }
    Func<int, string> get_doctype_text = (type) =>
    {
        switch (type)
        {
            case 1:
                return Localizer["DocTypeIncome"];

            case 2:
                return Localizer["DocTypeOutcome"];
            case 3:
                return Localizer["DocTypeProduction"];

            default:
                return "...";
        }

    };
}

<table class="table">
    <thead>
        <tr class="bg-white text-success">
            <th>

                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Date, querymodel)
            </th>
            <th>

                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Number, querymodel)
            </th>
            <th>

                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Type, querymodel)
            </th>
            <th>

                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Amount, querymodel)
            </th>
            <th>
                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Description, querymodel)

            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr class="bg-white text-secondary">
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Number)
                </td>
                <td>
                    @get_doctype_text(item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>


                    <a asp-action="Delete" asp-route-id="@item.Id" class="dialog-edit-icon"> <span class="fa fa-trash" aria-hidden="true"></span></a>
                    @Html.ActionLink("", "EditModal",
                                 new { id = item.Id }, new { @class = "catitem dialog-edit-icon fa fa-pencil-square-o" })
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr class="bg-white text-success rounded border">
            <td colspan="3">
                @await this.InvokeComponentAsync(Component, "TablePager", model => model.Description, querymodel)
            </td>
        </tr>
    </tfoot>
</table>