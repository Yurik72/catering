@model IEnumerable<Docs>
@inject CateringPro.Core.SharedViewLocalizer Localizer
@{
    var ModelName = "Categories";
    ViewData["Title"] = ModelName;
}


<div class="container">
    <div class="row justify-content-end">
        <div class="col-md-6 right">
            <h2>@Localizer["Docs"]</h2>
        </div>
        <div class="col-md-6 right">
            <div id="custom-search-input">
                <div class="input-group">
                    <input type="text" id="search-val" class="form-control input-lg" placeholder="@Localizer["Docs"]" />
                    <span class="input-group-btn">
                        <button class="btn btn-info btn-lg" id="search-btn" type="button">
                            <span class="fa fa-search" aria-hidden="true"></span>
                        </button>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12">
            <div id="table-content" class="table-content">

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12  table-footer bg-white text-success">
            <button type="button" id="create-btn"
                    class=" btn btn-xl btn-outline-danger float-lg-right justify-content-center float-md-none font-weight-bold btn-block col-lg-6"
                    onmousemove="this.style.background='#36C233'; this.style.color='#ffffff'"
                    onmouseout="this.style.background='#ffffff'; this.style.color='#36C233'"
                    style="background: #ffffff; border-color: #36C233; outline: none; height: 48px; color: #36C233; display: flex; align-items: center; justify-content: space-evenly; margin: 28px 0 23px; font-size: 14px;">
                &#65291; @*—“¬Œ–»“»*@ @Localizer["Create"]
            </button>
        </div>
    </div>
</div>
<div id="modDialog" class="modal document-modal fade">
    <div id="dialogContent" class="modal-dialog"></div>
</div>
<div id="modDialogingredientline" class="modal modal-search fade ingredient-line">
    <div id="dialogContentingredientline" class="modal-dialog modal-search-dialog">
        <div class="modal-content modal-content-search">
            <div class="modal-header">

                <div class="container">
                    <div class="row">
                        <h3>ƒÓ‰‡ÚË ≤Ì„≥‰≥∫ÌÚ</h3>
                        <button type="button" class="close" data-toggle="modal" data-target="#modDialogingredientline">X</button>
                    </div>
                    <div class="row">
                        <input type="text" id="search-ingredient" class="form-control input-lg" placeholder="...." />
                    </div>
                </div>
            </div>
            <div class="modal-body modal-search-body">
            </div>

        </div>
    </div>
</div>
@{ 
//await Html.RenderPartialAsync("ModalSearch", "Ingredient");
}
@section Scripts
{
    <script type="text/javascript">

          $(function () {
              setup_listitems({ href: '@Url.Content("~/Docs")' });
              setAutocomplete($(this).parents("#document"));
              $(document).on("click", "#create-docline",
                  function (e) {
                      console.log("create new line");
                      e.preventDefault();
                      var dlg = $(this).parents("#document");
                      var id = dlg.attr("data-id");
                      var linecount = dlg.find("#doc-lines").find(".doc-line").length;
                      var url = '@Url.Content("~/Docs/CreateNewLine")'+`?docId=${id}&linenum=${linecount}`;
                      //setup_search_ingredients();
                  console.log(url);
                      $.get(url, function (data) {
                          dlg.find("#doc-lines").find("#doc-footer").before(data);
                          setAutocomplete(dlg);
                });
              });
              $(document).on("click", ".delete-line",
                  function (e) {
                      console.log("delete line");
                      e.preventDefault();
                      var dlg = $(this).parents("#document");
                      var docline = $(this).parents(".doc-line");
                      docline.remove();
                      var maxidx = dlg.find(".doc-line").length;
                      console.log(maxidx);
                      dlg.find(".doc-line").each(function (lidx, lel) {
                          $(lel).find('input[name*="["]').each(function (idx, el) {
                              var name = $(el).attr('name');
                              //console.log(name);
                              var newname = name.replace(/\[\d+\]/g, `[${lidx}]`);
                              $(el).attr('name', newname);
                              //console.log(newname);
                          });
                      })

              });
              $('#modDialog').on('shown.bs.modal', function () {
                  setAutocomplete($(this));
              });
              function setAutocomplete(dlg) {
                  $(".doc-line-ingname")
                  .on("keydown", function (event) {
                      if (event.keyCode === $.ui.keyCode.TAB &&
                          $(this).autocomplete("instance").menu.active) {
                          event.preventDefault();
                      }
                  })
                      .autocomplete({
                          //source: '@Url.Action("Search","Ingredients")',
                          source:  function (request, response) {
                                        $.ajax({
                                            url: '@Url.Action("Search","Ingredients")',
                                            dataType: "json",
                                            data: "term=" + request.term,
                                            success: function (data) {
                                                response($.map(data, function (item) {
                                                    return {
                                                        label: item.name,
                                                        value: item.name,
                                                        id :item.id
                                                    };
                                                }));
                                            }});
                                    },
                          select: function (event, ui) {
                              //$(event.target).prev(".doc-line-ingid").val(ui.item.id);
                              $(event.target).parent().find(".doc-line-ingid").val(ui.item.id);
                             // console.log(event);
                             // console.log(ui);
                          },
                          appendTo: "#modDialog"


                    });
              }
              @*setup_search({
                  href: '@Url.Content("~/Ingredients/SearchView")',
                  itemselector:'a.select-ingredient',
                  classname: 'ingredient',
                  onitemselectedcb: function (src,html_item, item) {
                      var docline = $(src).parents(".row.doc-line");
                      docline.find("#line_IngredientsId").val(item.id);
                      docline.find("#line_Ingredients_Name").val(item.name);
                  }
              })*@
               @*function setup_search_ingredients() {
               // console.log("add ingredient");
                setup_search({
                    href: '@Url.Content("~/Ingredients/SearchView")',
                    itemselector: 'a.select-ingredient',
                    classname: 'ingredient',
                    onitemselectedcb: function (src, html_item, item) {
                        var index = $('#dialogContent').find(".ingredients-content-proportion").find(".ingredient-dishes-line").length;
                        var url_newline = `@Url.Content("~/Dishes/NewIngredientDishesLine")?Index=${index}&IngredientId=${item.id}&IngredientName=${item.name}`;
                        if (item.id != undefined) {

                            var ids = $('#dialogContent').find(".ingredients-content-proportion").find(".ingredient-dishes-line").map(function () { return $(this).attr("data-id"); }).get();
                            if (ids.includes(item.id)) {
                                showeditdayalert({ class: 'alert-danger', text: "@Localizer["SameIngredient"]" });
                            }
                            else {
                                $.get(url_newline, function (data) {
                                    $('#dialogContent').find(".ingredients-content-proportion").after(data);
                                });
                                $('#modDialog').attr("_changed", true);
                            }
                        }
                    }
                });
            }*@
            $(document).on('hidden.bs.modal', '.modal', function () {
                $('.modal:visible').length && $(document.body).addClass('modal-open');
            });
        })
    </script>
}
