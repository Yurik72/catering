@model IEnumerable<CateringPro.Models.Ingredients>
@inject CateringPro.Core.SharedViewLocalizer Localizer
@using CateringPro.Core


@{
    QueryModel querymodel = ViewData["QueryModel"] as QueryModel;
    if (querymodel == null)
    {
        querymodel = new QueryModel();
    }

}
@if (true)
{
    <div class="row mx-0 justify-content-start w-100 align-content-center">
        <div class="col-12 p-0  mt-2">
            @foreach (var item in Model)
            {
                <div class="col-12 p-0 d-flex box-shadow-container brd-bot-line mb-3 mb-lg-0 mb-md-0"
                     style="min-height: 52px; color: #232323">
                    <div class="col-12 p-0  d-flex flex-lg-row flex-md-row flex-column align-items-center my-2 my-lg-0 my-md-0">
                        <div class="col-md-3 col-lg-3 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Ingredient Name"]</span><span class="col-lg-12 col-md-12 col-6 p-0">@item.Name</span>
                            </div>
                            <div class="col-md-3 col-lg-3 col-12 d-flex justify-content-between mt-1 align-items-center"
                                 style="font-size: 16px">
                                <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                      style="font-size: 14px; font-weight: bold">@Localizer["StockValue"]</span>
                                    <input type="text" class="form-control col-lg-12 col-md-12 col-6 stockval"
                                           value="@item.StockValue" data-id="@item.Id"
                                           style="height: 34px; font-family: Open-Sans, sans-serif">
                                </div>
                                <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                                     style="font-size: 16px">
                                    <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                          style="font-size: 14px; font-weight: bold">@Localizer["Ingredients_MeasureUnit"]</span><span class="col-lg-12 col-md-12 col-6 p-0">@item.MeasureUnit</span>
                                    </div>
                                    <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                                         style="font-size: 16px">
                                        <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                              style="font-size: 14px; font-weight: bold">@Localizer["StockDate"]</span><span class="col-lg-12 col-md-12 col-6 p-0" style="font-family: Open-Sans, sans-serif">@item.StockDate.ToString("dd.MM.yyyy") @item.StockDate.ToString("HH:mm:ss")</span>
                                        </div>

                                        <div class="col-2">

                                        </div>
                                    </div>
                                </div>
                            }

        </div>
    </div>
    @Html.DisplayFor(model => querymodel, "PageNavigation", null)
}
else
{

    <table class="table">
        <thead>
            <tr class="bg-white text-success">
                <th>

                    @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Name, querymodel)
                </th>
                <th>

                    @await this.InvokeComponentAsync(Component, "TableColumn", model => model.StockValue, querymodel)
                </th>
                <th>

                    @await this.InvokeComponentAsync(Component, "TableColumn", model => model.MeasureUnit, querymodel)
                </th>
                <th>

                    @await this.InvokeComponentAsync(Component, "TableColumn", model => model.StockDate, querymodel)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr class="bg-white text-secondary row-stock">
                    <td>
                        @Html.HiddenFor(modelItem => item.Id)
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>

                        @Html.EditorFor(modelItem => item.StockValue, new { htmlAttributes = new { @class = "stockval" } })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MeasureUnit)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StockDate)
                    </td>
                    <td>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr class="bg-white text-success rounded border">
                <td colspan="3">
                    @await this.InvokeComponentAsync(Component, "TablePager", model => model.Name, querymodel)
                </td>
            </tr>
        </tfoot>
    </table>
}
