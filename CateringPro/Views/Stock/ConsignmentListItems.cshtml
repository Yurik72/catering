@model IEnumerable<CateringPro.Models.ConsignmentStockViewModel>
@inject CateringPro.Core.SharedViewLocalizer Localizer
@using CateringPro.Core


@{
    Layout = null;
    QueryModel querymodel = ViewData["QueryModel"] as QueryModel;
    if (querymodel == null)
    {
        querymodel = new QueryModel();
    }

}
@if (true)
{
    <div class="row mx-0 justify-content-start w-100 align-content-center">
        <div class="col-12 p-0  mt-2">
            @foreach (var item in Model)
            {
                <div class="col-12 p-0 d-flex box-shadow-container brd-bot-line mb-3 mb-lg-0 mb-md-0"
                     style="min-height: 52px; color: #232323">
                    <div class="col-12 p-0  d-flex flex-lg-row flex-md-row flex-column align-items-center my-2 my-lg-0 my-md-0">
                        <div class="col-md-1 col-lg-1 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <a 
                                 asp-controller="Stock" 
                                 asp-action="IngredientStockDetails"
                                 asp-route-id="@item.IngredientId"
                                 target="_blank">Деталi</a>
                        </div>
                        <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Consignment Ingredient Category Name"]</span>
                                 <span class="col-lg-12 col-md-12 col-6 p-0"> @Html.DisplayFor(modelItem => item.IngredientCategoryName)</span>
                        </div>
                        <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1 align-items-center"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Consignment Ingredient Name"]</span>
                            <span class="col-lg-12 col-md-12 col-6 p-0" style=""> @Html.DisplayFor(modelItem => item.IngredientName)</span>
                        </div>
                        <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Consignment StockValue"]</span><span class="col-lg-12 col-md-12 col-6 p-0"
      style="font-family: Open-Sans, sans-serif">  @Html.DisplayFor(modelItem => item.StockValue)</span>
                        </div>
                        <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Consignment MeasureUnit"]</span><span class="col-lg-12 col-md-12 col-6 p-0" style="">@Html.DisplayFor(modelItem => item.MeasureUnit)</span>
                        </div>
                        <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Consignment Price"]</span><span class="col-lg-12 col-md-12 col-6 p-0"
      style="font-family: Open-Sans, sans-serif"> @Html.DisplayFor(modelItem => item.Price)</span>
                        </div>
                        <div class="col-md-2 col-lg-2 col-12 d-flex justify-content-between mt-1"
                             style="font-size: 16px">
                            <span class="col-6 p-0 d-md-none d-lg-none d-inline"
                                  style="font-size: 14px; font-weight: bold">@Localizer["Consignment ValidTo"]</span>
                            <span class="col-lg-12 col-md-12 col-6 p-0" style="font-family: Open-Sans, sans-serif">
                                @if (item.Consignments != null)
                                {
                                    @Html.DisplayFor(modelItem => item.Consignments.LastOrDefault().ValidUntil)
                                  }
                            </span>
                        </div>

                    </div>
                </div>
            }
            </div>
        </div>
            }
            else
            {

            <table class="table stock-inredients">
                <thead>
                    <tr class="bg-white text-success">
                        <th>

                            @await this.InvokeComponentAsync(Component, "TableColumn", model => model.IngredientCategoryName, querymodel)
                        </th>
                        <th>

                            @await this.InvokeComponentAsync(Component, "TableColumn", model => model.IngredientName, querymodel)
                        </th>
                        <th>

                            @await this.InvokeComponentAsync(Component, "TableColumn", model => model.StockValue, querymodel)
                        </th>
                        <th>

                            @await this.InvokeComponentAsync(Component, "TableColumn", model => model.MeasureUnit, querymodel)
                        </th>
                        <th>

                            @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Price, querymodel)
                        </th>

                        <th>

                            @await this.InvokeComponentAsync(Component, "TableColumn", model => model.ValidTo, querymodel)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="bg-white text-secondary row-stock">
                            <td>
                                @Html.HiddenFor(modelItem => item.IngredientCategoryId)
                                @Html.DisplayFor(modelItem => item.IngredientCategoryName)
                            </td>
                            <td>
                                @Html.HiddenFor(modelItem => item.IngredientId)
                                @Html.DisplayFor(modelItem => item.IngredientName)
                            </td>
                            <td>

                                @Html.DisplayFor(modelItem => item.StockValue, new { htmlAttributes = new { @class = "stockval" } })
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.MeasureUnit)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Price)
                            </td>
                            <td>
                            </td>
                        </tr>
                        foreach (var detail in item.Consignments)
                        {
                            <tr class="stock-consignment small">
                                <td>
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => detail.DocTypeName)  @Html.DisplayFor(modelItem => detail.InitialValue)  @Html.DisplayFor(modelItem => item.MeasureUnit)

                                    @detail.DocDate.ToString("d", System.Globalization.CultureInfo.CurrentUICulture)

                                    <br>
                                    @Html.DisplayFor(modelItem => detail.DocNumber)

                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => detail.StockValue)

                                </td>
                                <td>
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => detail.Price)
                                </td>

                                <td>
                                    @detail.ValidUntil.ToString("d", System.Globalization.CultureInfo.CurrentUICulture)

                                </td>
                                <td>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
                <tfoot>
                    <tr class="bg-white text-success rounded border">
                        <td colspan="3">
                            @await this.InvokeComponentAsync(Component, "TablePager", model => model.IngredientName, querymodel)
                        </td>
                    </tr>
                </tfoot>
            </table>
            }
