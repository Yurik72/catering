@model DateTime
@using System.Globalization
@using CateringPro.Core
@inject CateringPro.Core.SharedViewLocalizer Localizer
@{
    ViewData["Title"] = "Customer Orders";
}
@{
    DateTime daydate = Model;
    long ms_since1970 = (long)daydate.Subtract(DateTime.MinValue.AddYears(1969)).TotalMilliseconds;
    CultureInfo ci = new CultureInfo("en-US");
    // Get the DateTimeFormatInfo for the en-US culture.
    DateTimeFormatInfo dtfi = ci.DateTimeFormat;
}


<h2>My Orders</h2>

<div class="container">
    <div class="row justify-content-md-center">
        <div class="input-group-prepend col-lg-1 col-md-1 dayselector dayselectback">
            <span><i class="fa fa-angle-double-left input-group-text"></i></span>

        </div>
        <div class="col-lg-4 col-md-4 ">
            <input type="hidden" asp-for="@ms_since1970" id="currentdate" />
            <div id="weekselector">

            </div>
        </div>
        <div class="input-group-append dayselector dayselectforward">
            <span><i class="fa fa-angle-double-right input-group-text"></i></span>

        </div>
    </div>
    <div class="row" style="height:10px">

    </div>

</div>
<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">

        @{
            DateTime current_head = daydate.StartOfWeek(DayOfWeek.Sunday);
        }
        @for (int i = 0; i < 7; i++)
        {
            <a class="nav-item nav-link nav-day @(i==0?" active":"")" id="nav-tab-@i" data-toggle="tab" href="#nav-content-@i" role="tab" aria-controls="nav-content-@i" aria-selected="false"> @dtfi.GetDayName((DayOfWeek)i)</a>

            current_head = current_head.AddDays(1);
        }
    </div>
</nav>
<div class="tab-content day-content" id="nav-tabContent">
    @{
        DateTime current_content = daydate.StartOfWeek(DayOfWeek.Sunday);
    }
    @for (int i = 0; i < 7; i++)
    {
        <div class="tab-pane fade@(i==0?"  show active":"")" id="nav-content-@i" role="tabpanel" aria-labelledby="nav-tab-@i">
            @await Component.InvokeAsync("CustomerOrdersComponent", current_content)
        </div>

        current_content = current_content.AddDays(1);
    }
</div>
@*
    <div id="accordion">
        @{

            DateTime current = daydate.StartOfWeek(DayOfWeek.Sunday); ;
        }
        @for (int i = 0; i < 7; i++)
        {

            <div class="container">
                <div class="row ">
                    <div class="col-lg-10 col-md-10 ">
                        <button class="btn btn-link collapsed daydish" data-toggle="collapse" data-target=@("#collapse" + i) aria-expanded="false" aria-controls=@("collapse" + i)>
                            <div class="expand">


                            </div>
                            <div class="dayname">@dtfi.GetDayName((DayOfWeek)i) </div>
                        </button>

                    </div>

                </div>
                <div class="row">
                    <div id=@("collapse" + i) class="col col-lg-8 col-md-8 collapse  aria-labelledby=@("heading" + i)" data-parent="#accordion" data-daydate="@current">

                        @await Component.InvokeAsync("CustomerOrdersComponent", current)

                    </div>
                </div>



            </div>
            current = current.AddDays(1);
        }
    </div>
*@


@section Scripts {

    <script type="text/javascript" src="~/js/bootstrap-input-spinner.js" defer></script>

    <script>
        $(function () {

            $("input.numberspinner[type='number']").inputSpinner()
            var html_loading = '<div class="spinner-container"> <div>Loading</div><div class="spinner-border" role="status"> <span class="sr-only">Loading...</span> </div></div>';
            var reloadDay = function (dayindex) {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                dt.setDate(dt.getDate() - dt.getDay() + dayindex);
                $('#nav-content-' + dayindex).html(html_loading);
                $('#nav-content-' + dayindex).load('/CustomerOrders/CustomerOrderDayComponent?daydate=' + encodeURI(dt.toDateString()));
            }
            var weektext = function () {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                firstweekday = new Date(dt.getTime());
                lasttweekday = new Date(dt.getTime());
                firstweekday.setDate(dt.getDate() - dt.getDay());
                lasttweekday.setDate(dt.getDate() + (6 - dt.getDay()));
                return firstweekday.toLocaleDateString() + " - " + lasttweekday.toLocaleDateString();
            }

            $('#weekselector').text(weektext());
            var incrementday = function (d) {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                dt.setDate(dt.getDate() + d);
                $('#currentdate').val(dt.getTime());
                $('#weekselector').text(weektext());
                for (var i = 0; i < 7; i++)
                    reloadDay(i);
            }
            $('.dayselectback').click((e) => {
                e.preventDefault();
                incrementday(-7);
            });
            $('.dayselectforward').click((e) => {
                e.preventDefault();
                incrementday(7);
            });


        });

    </script>
}


