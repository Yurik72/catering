@model IEnumerable<CateringPro.Models.Dish>

@using CateringPro.Core
@{
    QueryModel querymodel = ViewData["QueryModel"] as QueryModel;
    if (querymodel == null)
    {
        querymodel = new QueryModel();
    }
    int i = 0;
    if (ViewData["courseindex"] != null)
        i = (int)(ViewData["courseindex"]);
   

}
<table class="table listitems">
    <thead>
        <tr class="bg-white text-secondary">
            <th  width="20%" >

            </th>
            <th width="10%">
                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Category.Name, querymodel, (object)ViewBag.CategoriesId)
            </th>
            <th  width="20%">
                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Name, querymodel)
            </th>
            <th  width="10%">
                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Price, querymodel)
            </th>
            <th width="20%">
                @await this.InvokeComponentAsync(Component, "TableColumn", model => model.Description, querymodel)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                <img src="@Url.Action("GetPicture","Pictures",new { id=item.PictureId,width=80,height=80})" style="width:80px;height:80px;" />
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td class="small" >
                @Html.DisplayFor(modelItem => item.Description)
                <p/>
                @string.Join(",", item.DishIngredients.Select(di => di.Ingredient.Name))
            </td>
            <td>



                @*<a asp-action="Delete" asp-route-id="@item.Id" class="dialog-edit-icon"> <span class="fa fa-trash" aria-hidden="true"></span></a>
        @Html.ActionLink("", "EditModal",
                     new { id = item.Id }, new { @class = "dishitem dialog-edit-icon fa fa-pencil-square-o" })*@
                <a class="dialog-edit-icon add-item" data-id=@item.Id><span class="fa fa-plus" data-id=@item.Id></span></a>
            </td>
        </tr>
        }
    </tbody>
    <tfoot>
        <tr class="bg-white text-success rounded border">
            <td colspan="5">
                @await this.InvokeComponentAsync(Component, "TablePager", model => model.Description, querymodel)
            </td>
        </tr>
    </tfoot>
</table>
<script>
     $(".add-item").click(
    function (e) {
            console.log("add dish");
            e.preventDefault();
                 var dlg = $("#complex");

                 var id = $(this).attr("data-id");
                 console.log(id);


                     // var id = dlg.attr("data-id");


                     // var url = '@Url.Content("~/Complex/CreateNewCourse")' + `?dishId=${id}&course=${course}`;
                      var url = '@Url.Content("~/Dishes/Info/")' + `${id}`;
                  //console.log(url);
            $.get(url, function (data) {
                //document.getElementById("dishContainer").appendChild(data);
                let name = ".course-footer-"+@i
                console.log($(name).html());

                //dlg.find("#complex-line "+@i).find("#course-footer "+@i).before(data);
                $(data).insertBefore(".course-footer-" +@i);

                });
        });
</script>