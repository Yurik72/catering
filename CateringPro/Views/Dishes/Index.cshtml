@model IEnumerable<CateringPro.Models.Dish>


@inject CateringPro.Core.SharedViewLocalizer Localizer

@{
    var ModelName = Localizer["Dishes"];

    ViewData["Title"] = "Dishes";
}



<div class="container">
    <div class="row justify-content-end">
        <div class="col-md-6 right">
            <h2>@ModelName</h2>
        </div>
        <div class="col-md-6 right">
            <div id="custom-search-input">
                <div class="input-group">
                    <input type="text" id="search-val" class="form-control input-lg" placeholder="@ModelName" />
                    <span class="input-group-btn">
                        <button class="btn btn-info btn-lg" id="search-btn" type="button">
                            <span class="fa fa-search" aria-hidden="true"></span>
                        </button>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12">
            <div id="table-content" class="table-content">

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-12 col-lg-12  table-footer bg-white text-success">
            <div id="create-btn" class="col-lg-3 col-md-3 create">
                <span>@Localizer["Create"]</span>
                <span class="fa fa-plus" aria-hidden="true"></span>

            </div>
        </div>
    </div>
</div>

<div id="modDialog" class="modal dishes-modal fade">
    <div id="dialogContent" class="modal-dialog"></div>
</div>



@section scripts
{
    <script src="http://malsup.github.com/jquery.form.js"></script>
    <script type="text/javascript">

        $(function () {

            var reload = function (href) {
                 if (!href)
                    href = '/Dishes/ListItems?';
                else
                    href += "&";
                $('#table-content').load(href + 'searchcriteria=' + $('#search-val').val());
               
            }

            $.ajaxSetup({ cache: false });
            //$('#table-content').load('@Url.Action("ListItems","Dishes", new { searchcriteria = "" })');
            reload();
            $('#search-btn').click(function (e) {
                reload();
            });
            $('#custom-search-input').keydown((event) => {
                if (event.which == 13) {
                    event.preventDefault();
                    reload();
                }
            });
            $('#create-btn').click(function (e) {
                e.preventDefault();
                var url = '@Url.Content("~/Dishes/CreateModal")';
                $.get(url, function (data) {
                    $('#dialogContent').html(data);
                    $('#modDialog').modal('show');
                });
            });
            $(document).on("click", "a.ahead", function (e) {
                e.preventDefault();
                reload(this.href);
            });

            $(document).on("change", "select.col-select-filter", function (e) {
                e.preventDefault();
                var href = $(this).next().attr('href');

                if (href.includes("?")) {
                    href += "&relationfilter=" + $(this).val();
                }
                else {
                     href += "?relationfilter=" + $(this).val();
                }

                reload(href);
            });
            function setupChangesChecker(dlg) {
                $(dlg).attr("_changed", false);
                $(dlg).find("input,textarea").change(function () {
                    $(dlg).attr("_changed", true);
                });
                $(dlg).on('hide.bs.modal', function (e) {
                    if ($(dlg).attr("_changed") == "true") {
                        if (!confirm("There are unsaved changes, please confirm. your input will be lost"))
                            e.preventDefault();
                        $(dlg).attr("_changed", false);
                    }
                });

            }
            $(document).on( "click", "a.dishitem", function(e) {
               e.preventDefault();

                $.get(this.href, function (data) {
                    $('#dialogContent').html(data);
                    //console.log(data);
                    $('#modDialog').attr("data-backdrop", false);
                    $('#modDialog').css("background-color", "rgba(117, 117, 117, 0.5)");
                    $('#modDialog').modal('show');
                    setupChangesChecker($('#modDialog'));
                   
                    var id = $('#dialogContent').find("#Id").val();
                    loadingredients(id);
                    loadingredientsproprotion(id);
                   
                   // $('#dialogContent').find("#nav-tab").tab();
                });
            });

            $(document).on("click", "a.cmd-delete", function (e) {
                e.preventDefault();
                $.get(this.href, function (data) {

                    $('#dialogContent').html(data);

                  //  if (self.options.onloadedcb)
                  //      self.options.onloadedcb();
                });
            });
            function loadingredientsproprotion(id) {
                var url = '@Url.Content("~/Dishes/EditIngredientsProportion/")' + id;

                $.get(url, function (data) {
                    $('#dialogContent').find(".ingredients-content-proportion").html(data);
                });
            }
            function loadingredients(id) {
                var url = '@Url.Content("~/Dishes/EditIngredients/")' + id;

                $.get(url, function (data) {
                    $('#dialogContent').find(".ingredients-content").html(data);
                     $('#dialogContent').find(".select-ingredients").bootstrapDualListbox({
                              // default text
                              filterTextClear:'show all',//decodeURI('@Localizer["DLB show all"]'),//'show all',
                              filterPlaceHolder:'Filter',//decodeURI('@Localizer["DLB Filter"]'),//'Filter',
                              moveSelectedLabel:decodeURI('@Localizer["DLB Move Selected"]'),//'Move selected',
                              moveAllLabel:decodeURI('@Localizer["DLB Move All"]'),//'Move all',
                              removeSelectedLabel:decodeURI('@Localizer["DLB Remove selected"]'),//'Remove selected',
                              removeAllLabel:decodeURI('@Localizer["DLB Remove all"]'),//'Remove all',
                              // true/false (forced true on androids, see the comment later)
                              moveOnSelect:true,                     
                              // 'all' / 'moved' / false                                          
                              preserveSelectionOnMove:false,               
                              // 'string', false                                    
                              selectedListLabel:false,                   
                              // 'string', false
                              nonSelectedListLabel:false, 
                              // 'string_of_postfix' / false                                                     
                              helperSelectNamePostfix:'_helper',     
                              // minimal height in pixels
                              selectorMinimalHeight: 200,
                              // whether to show filter inputs
                              showFilterInputs:true,           
                              // string, filter the non selected options                                                
                              nonSelectedFilter:'',               
                              // string, filter the selected options                                             
                              selectedFilter:'',                                          
                              // text when all options are visible / false for no info text                     
                              infoText:decodeURI('@Localizer["DLB Showing all"]'),//'Showing all {0}',              
                              // when not all of the options are visible due to the filter                                        
                              infoTextFiltered:'<span class="badge badge-warning">Filtered</span> {0} from {1}',
                              // when there are no options present in the list
                              infoTextEmpty:decodeURI('@Localizer["DLB Empty list"]'),//'Empty list',    
                              // sort by input order
                              sortByInputOrder:false,
                              // filter by selector's values, boolean
                              filterOnValues:false,          
                              // boolean, allows user to unbind default event behaviour and run their own instead                                                  
                              eventMoveOverride:false,          
                              // boolean, allows user to unbind default event behaviour and run their own instead                                               
                              eventMoveAllOverride:false,     
                              // boolean, allows user to unbind default event behaviour and run their own instead
                              eventRemoveOverride:false,          
                              // boolean, allows user to unbind default event behaviour and run their own instead                                             
                              eventRemoveAllOverride:false,         
                               // sets the button style class for all the buttons
                              btnClass: 'btn-outline-secondary',     
                              // string, sets the text for the "Move" button                                           
                              btnMoveText: '&gt;',       
                              // string, sets the text for the "Remove" button                                                       
                              btnRemoveText: '&lt;',     
                              // string, sets the text for the "Move All" button
                              btnMoveAllText: '&gt;&gt;',    
                              // string, sets the text for the "Remove All" button
                              btnRemoveAllText: '&lt;&lt;' 
                            });
                });
            }
             function readURL(input) {
                  if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function(e) {
                      $('#imgfilepicture').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                  }
                }
             $(document).on("change","#filepicture",function() {
                  readURL(this);
              });
              $(document).on('click', '[data-save="modal"]', function (event) {
                    event.preventDefault();

                    var form = $(this).parents('.modal-body').find('form');
                    var actionUrl = form.attr('action');
                    //var dataToSend = form.serialize();
                    // var formData = new FormData(form[0]);
                   var formdata = false;
                    if (window.FormData){
                        formdata = new FormData(form[0]);
                    }

                  var formAction = form.attr('action');


                    $.ajax({
                        url         : formAction,
                        data        : formdata ? formdata : form.serialize(),
                        cache       : false,
                        contentType : false,
                        processData : false,
                        type        : 'POST',
                        success     : function(data, textStatus, jqXHR){
                            var isValid = false;

                          if (data && data.res && data.res== "OK")
                                    isValid = true;

                                  if (isValid) {
                                      $('#modDialog').modal('hide');
                                      $('#dialogContent').empty();
                                      reload();
                                  }
                                  else {
                                      var newBody = $('.modal-body', data);
                                      $(document).find('.modal-body').replaceWith(newBody);
                                  }
                            }
                    });


                });
        })
    </script>
}
