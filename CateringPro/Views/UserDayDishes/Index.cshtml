@model UserDayEditModel
@using System.Globalization
@using CateringPro.Core
@inject CateringPro.Core.SharedViewLocalizer Localizer
@inject CateringPro.Repositories.IUserDayDishesRepository udrepo;
@inject Microsoft.Extensions.Options.IOptions<UIOption> pageOptions
@{
    ViewData["Title"] = "My Order";
}
@{
    DateTime daydate = Model.DayDate;
    long ms_since1970 = (long)daydate.Subtract(DateTime.MinValue.AddYears(1969)).TotalMilliseconds;
    CultureInfo ci = new CultureInfo("en-US");
    // Get the DateTimeFormatInfo for the en-US culture.
    DateTimeFormatInfo dtfi = ci.DateTimeFormat;
    CultureInfo cultureCurrent = CultureInfo.CurrentUICulture;
}


<h2 class="text-center">@Localizer["OrderTitle"]</h2>
<div class="container">

    <div class="row  justify-content-center">
        <div class="col input-group justify-content-centers">
            <div class="input-group-prepend dayselector dayselectback">
                <span><i class="fa fa-angle-double-left input-group-text"></i></span>

            </div>

            <input type="hidden" asp-for="@ms_since1970" id="currentdate" />
            <div id="weekselector" class="weekselector">

            </div>


            <div class="input-group-append dayselector  dayselectforward">
                <span><i class="fa fa-angle-double-right input-group-text"></i></span>

            </div>
        </div>
    </div>
    <div class="row" style="height:10px">

    </div>

</div>
<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">

        @{
            DateTime current_head = daydate.StartOfWeek(DayOfWeek.Sunday);

        }
        @for (int i = 0; i < 7; i++)
        {
            <a class="nav-item nav-link nav-day @(i==0?" active":"") @(udrepo.IsAllowDayEdit(current_head, User.GetCompanyID())?"":"day-closed")" id="nav-tab-@i" data-toggle="tab" href="#nav-content-@i" role="tab" aria-controls="nav-content-@i" aria-selected="false">

                @System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetDayName((DayOfWeek)i)<br />
                <span class="shorttabdate">@current_head.Day</span>
            </a>

            current_head = current_head.AddDays(1);
        }
    </div>
</nav>
<div class="tab-content day-content" id="nav-tabContent">
    @{
        DateTime current_content = daydate.StartOfWeek(DayOfWeek.Sunday);
    }
    @for (int i = 0; i < 7; i++)
    {
    <div class="tab-pane fade@(i==0?"  show active":"")" id="nav-content-@i" role="tabpanel" data-dayindex="@i" aria-labelledby="nav-tab-@i">
        @if (!udrepo.IsAllowDayEdit(current_content, User.GetCompanyID()))
        {
        <div class="container day-closed-msg">
            <h3> @Localizer["DayClosedForOrder"] </h3>
        </div>
        }
        @await Component.InvokeAsync("UserDayOrderedComponent", current_content)
        @if (Model.ShowComplex)
        {
        @await Component.InvokeAsync("UserDayComplexComponent", current_content)
        }
        @if (Model.ShowDishes)
        {
        @await Component.InvokeAsync("UserDayDishComponent", current_content)
        }

    </div>

        current_content = current_content.AddDays(1);
    }
</div>
<div id="modOrderSuccess" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Message"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@Localizer["OrderAccepted"]</p>
                <p>@Localizer["OrdeAcceptedDetail"]</p>

            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div id="modOrderFailOutDate" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Message"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@Localizer["OrderNotAccepted"]</p>
                <p>@Localizer["OrderNotAcceptedOutDate"]</p>

            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div id="modOrderEmpty" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Message"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@Localizer["OrderNotAccepted"]</p>
                <p>@Localizer["OrderEmpty"]</p>

            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div id="modOrderFail" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["Message"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@Localizer["OrderNotAccepted"]</p>
                <p>@Localizer["InternalError"]</p>

            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div id="modPayment" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Сплата LiqPay</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form method="POST" class="payment-form" action="https://www.liqpay.ua/api/3/checkout" accept-charset="utf-8">
                <input type="hidden" name="data" value="eyJwdWJsaWNfa2V5IjoiaTAwMDAwMDAwIiwidmVyc2lvbiI6IjMiLCJhY3Rpb24iOiJwYXkiLCJhbW91bnQiOiIzIiwiY3VycmVuY3kiOiJVQUgiLCJkZXNjcmlwdGlvbiI6InRlc3QiLCJvcmRlcl9pZCI6IjAwMDAwMSJ9" />
                <input type="hidden" name="signature" value="wR+UZDC4jjeL/qUOvIsofIWpZh8=" />
                <label for="numorder" class="control-label">Code</label>
                <input type="text" name="amount" id="numorder" class="form-control" />
                <p />
                <label for="amount" class="control-label">Сума ₴</label>
                <input type="number" name="amount" id="amount" class="form-control" />
                <p />
                <input type="image" src="//static.liqpay.ua/buttons/p1ru.radius.png" />
            </form>
        </div>
    </div>
</div>

@section Scripts {

    <script type="text/javascript" src="~/js/bootstrap-input-spinner.js" defer></script>

    <script>
        $(function () {

            $("input.numberspinner[type='number']").inputSpinner();
           // $("#weekselected").inputSpinner();
            var html_loading = '<div class="spinner-container"> <div>Loading</div><div class="spinner-border" role="status"> <span class="sr-only">Loading...</span> </div></div>';

            var reloadDay = function (dayindex) {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                dt.setDate(dt.getDate() - dt.getDay() + dayindex);
                var navcontent = $('#nav-content-' + dayindex);
                navcontent.html(html_loading);
                navcontent.load('/UserDayDishes/EditUserDay?daydate=' + encodeURI(dt.toDateString()),
                    function (response, status, xhr) {
                        navcontent.find("input.numberspinner[type='number']").inputSpinner();
                        setClosedDaystyle(dayindex);
                    }
                    );
                var daytabtext = dateToshortString(dt);
                daytabtext = ""+dt.getDate();
                $('#nav-tab-' + dayindex).find('.shorttabdate').text(daytabtext);

                // $('#collapse' + dayindex).html(html_loading);
                // $('#collapse' + dayindex).load('/UserDayDishes/EditUserDayComponent?daydate=' + encodeURI(dt.toDateString()));
            }
            var currentDate = () => {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                return dt;
            };
            var firstWeekDayDate = () => {
                var first = currentDate();
                first.setDate(first.getDate() - first.getDay());
                return first;
            }
            var setClosedDaystyle = function (dayindex ) {


                var navcontent = $('#nav-content-' + dayindex);
                if (navcontent.find(".day-closed-msg").length > 0) {
                    $('#nav-tab-' + dayindex).addClass("day-closed");
                }
                else {
                    $('#nav-tab-' + dayindex).removeClass("day-closed");
                }


            }
            var dateToshortString = (dt) => {
                var dd = dt.getDate();
                var mm = dt.getMonth() + 1;
                if (dd < 10) { dd = '0' + dd }
                if (mm < 10) { mm = '0' + mm }
                var yyyy = dt.getFullYear();
                return dd + '.' + mm + '.' + yyyy;
            }
            var weektext = function () {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                var firstweekday = new Date(dt.getTime());
                var lasttweekday = new Date(dt.getTime());
                firstweekday.setDate(dt.getDate() - dt.getDay());
                lasttweekday.setDate(dt.getDate() + (6 - dt.getDay()));
                var locale = "@cultureCurrent.Name";
                var res = firstweekday.getDate();
                res += " - ";
                res += lasttweekday.getDate();
                res += "  ";
                res += lasttweekday.toLocaleString(locale, { month: "long" });
                res += " "+lasttweekday.getFullYear();
                return res;
                //return firstweekday.toLocaleDateString() + " - " + lasttweekday.toLocaleDateString();

            }
            var calctotal = (tab, dayindex) => {
                // var daytab = $('#nav-tabContent').find('[data-dayindex=' + dayindex + ']');
                var totalQuantity = 0;
                var totalAmount = 0.0;
                var totalcomplexQuantity = 0;
                var totalcomplexAmount = 0.0;
                $(tab).find('[datafield="Quantity"]').each(function (idx, element) {
                    var quantity = Number.parseInt($(element).val());
                    var parentform = $(element).parents('[data-form="userdaydish"]');
                    var price = Number.parseFloat(parentform.find('[datafield="Price"]').val());
                    if (!isNaN(price)) {
                        totalQuantity += quantity;
                        totalAmount += quantity * price;
                    }
                    var parentformcomplex = $(element).parents('[data-form="userdaycomplex"]');
                    var pricecomplex = Number.parseFloat(parentformcomplex.find('[datafield="Price"]').val());
                    if (!isNaN(pricecomplex)) {
                        totalcomplexQuantity += quantity;
                        totalcomplexAmount += quantity * pricecomplex;
                    }
                });

                $(tab).find(".total-quantity").text(totalQuantity);
                $(tab).find(".total-amount").text(totalAmount.toFixed(2));
                $(tab).find(".totalcomplex-quantity").text(totalcomplexQuantity);
                $(tab).find(".totalcomplex-amount").text(totalcomplexAmount.toFixed(2));
            };

            $(document).on('change', "input.numberspinner[type='number']", function (event) {
                var parenttab = $(this).parents('.tab-pane');
                var dayindex = Number.parseInt(parenttab.attr('data-dayindex'));
                calctotal(parenttab, dayindex);
            })
            $('#weekselector').text(weektext());
            $('#weekselected').text(weektext());
            var incrementday = function (d) {
                var ms = parseInt($('#currentdate').val());
                var dt = new Date(ms);
                dt.setDate(dt.getDate() + d);
                $('#currentdate').val(dt.getTime());
                $('#weekselector').text(weektext());
                $('#weekselected').text(weektext());
                for (var i = 0; i < 7; i++)
                    reloadDay(i);
                setClosedDaystyle();
            }
            $('.dayselectback').click((e) => {
                e.preventDefault();
                incrementday(-7);
            });
            $('.dayselectforward').click((e) => {
                e.preventDefault();
                incrementday(7);
            });
            var showOrderResult = function (data) {
                if (!data || !data.res) {
                    $('#modOrderFail').modal('show');
                    return;
                }
                if (data.res == "FAIL" && data.reason == "OutDate") {
                    $('#modOrderFailOutDate').modal('show');
                    return;
                }
                 if (data.res == "FAIL" && data.reason == "Empty") {
                    $('#modOrderEmpty').modal('show');
                    return;
                }

                if (data.res == "OK" ) {
                    $('#modOrderSuccess').modal('show');
                    return;
                }
                $('#modOrderFail').modal('show');
            }
            $(document).on('click', '[data-action="saveuserday"]', function (event) {
                event.preventDefault();
                var divform = $(this).parents(".userdaydish").find('[data-form="userday"]');
                var daydishes = [];
                divform.find('[data-form="userdaydish"]').each(function (index, day) { //each day
                    var daydish = {}
                    $(day).find('[datafield]').each(function (idx, element) {
                        daydish[$(element).attr("datafield")] = $(element).val();
                    })
                    daydishes.push(daydish)
                });

                $.ajax({
                    type: "POST",
                    data: res = { daydishes },

                    url: "/UserDayDishes/SaveDay",
                    success: function (data) {
                        // alert(data);
                       // $('#modOrderSuccess').modal('show');
                        showOrderResult(data);
                    }
                });
            });
             $(document).on('click', '[data-action="saveuserdaycomplex"]', function (event) {
                event.preventDefault();
                var divform = $(this).parents(".userdaycomplex").find('[data-form="userdaycomplex"]');
                var daycomplexes = [];
                divform.find('[data-form="userdaycomplexitem"]').each(function (index, day) { //each day
                    var daydish = {}
                    $(day).find('[datafield]').each(function (idx, element) {
                        daydish[$(element).attr("datafield")] = $(element).val();
                    })
                    daycomplexes.push(daydish)
                });

                $.ajax({
                    type: "POST",
                    data: res = { daycomplexes },

                    url: "/UserDayDishes/SaveDayComplex",
                    success: function (data) {
                        // alert(data);
                       // $('#modOrderSuccess').modal('show');
                         showOrderResult(data);
                    }
                });
            });
            $(document).on('click', '[data-action="payuserday"]', function (event) {
                event.preventDefault();
                var divform = $(this).parents(".userdaydish").find('[data-form="userday"]');
                var daydishes = [];
                var amount = 0.0
                divform.find('[data-form="userdaydish"]').each(function (index, day) { //each day
                    var daydish = {}
                    $(day).find('[datafield]').each(function (idx, element) {
                        daydish[$(element).attr("datafield")] = $(element).val();
                    })
                    daydishes.push(daydish)
                    amount += Number.parseFloat(daydish.Price) * Number.parseFloat(daydish.Quantity);
                });
                $('#modPayment').find('#amount').val(amount);
                $('#modPayment').find('#numorder').val('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx');
                $('#modPayment').modal('show');
            })
            //roll up shoping cart
            $(document).on('click', ".show-details", function () {
                $(this).parent(".dayComplexBag").parent(".userDayComplexBag").children(".bagDayComplexItem").slideToggle(300);
            });

           

            //delete ordered complex

            $(document).on('click', '.delete-complex', function (event) {
                var res = confirm("Are you sure you want to delete ?");
                if (res) {
                    var com = $(this).attr("complexId");
                    var date = $(this).attr("date");
                    var UserDayComplex = { ComplexId: com, Date: date };
                    $.ajax({
                        type: "POST",
                        data: res = { UserDayComplex },

                        url: "/UserDayDishes/DeleteDayComplex",
                        success: function (data) {
                            // alert(data);
                            // $('#modOrderSuccess').modal('show');
                            if (data.res == "OK") {
                                // $('#modOrderSuccess').modal('show');
                                //alert("Deleted");
                                var day = $(".tab-pane.fade.show.active").attr("data-dayindex");
                                reloadDay(day);
                                return;
                            }
                            showOrderResult(data);
                        }
                    });
                }
            });



            //for one option menu

            $(document).on('click', '.complex-check', function (event) {
                if (!$(this).is(":checked")) {
                    var day = $(this).attr("day");
                    var com = $(this).attr("complex");
                    var dishes = $("[complexdish='" + com + "'][day='" + day + "']");
                    $(dishes).prop('checked', false);
                }
                else {
                    var day = $(this).attr("day");
                    var com = $(this).attr("complex");
                    var dishes = $("[complexdish='" + com + "'][day='" + day + "']");
                    var courses = [];
                    $(dishes).each(function () {
                        courses.push(parseInt($(this).attr("course")));
                    });
                    console.log(courses);
                    var max = Math.max.apply(Math,courses);
                    console.log(max);
                    for (var i = 0; i <= max; i++) {
                       var dish = $("[complexdish='" + com + "'][day='" + day + "'][course='" + i + "']");
                        $(dish).prop('checked', true);
                    }
                }
            });

            $(document).on('click', '.dish-check', function (event) {
                if ($(this).is(":checked")) {
                    var day = $(this).attr("day");
                    var com = $(this).attr("complexdish");
                    var chCourse = parseInt($(this).attr("course"));
                    var complex = $("[complex='" + com + "'][day='" + day + "']");
                    if (!$(complex).is(":checked")) {
                        $(complex).prop('checked', true);

                        var dishes = $("[complexdish='" + com + "'][day='" + day + "']");
                        var courses = [];
                        $(dishes).each(function () {
                            courses.push(parseInt($(this).attr("course")));
                        });
                        console.log(courses);
                        var max = Math.max.apply(Math, courses);
                        console.log(max);
                        for (var i = 0; i <= max; i++) {
                            if (i == chCourse)
                                continue;
                            var dish = $("[complexdish='" + com + "'][day='" + day + "'][course='" + i + "']");
                            $(dish).prop('checked', true);
                        }
                    }
                }
            });

            //post one day complex
            $(document).on('click', '.send', function (event) {
                var fullDate = $(this).attr("date-fullDate");
                var date = $(this).attr("data-date");
                var form = $("#orderForm-" + date);
                var complexes = $(form).find(".complex-check");
                var UserDayDish = [];
                var UserDayComplex = [];
                var flag = true;
                //console.log(complexes);
                $(complexes).each(function (ind) {
                    //console.log($(this).is(":checked"));
                    if ($(this).is(":checked")) {
                        //console.log("In if");
                        var com = $(this).attr("complex");
                        var dishOrdered = 0;
                        var dishCourses = 0;
                        var complex = {};
                        complex.ComplexId = com;
                        complex.Price = $(this).attr("price");
                        complex.Date = fullDate;
                        complex.Quantity = 1;
                        UserDayComplex.push(complex);
                        var dishes = $("[complexdish='" + com + "'][day='" + date + "']");
                        $(dishes).each(function (i) {

                            //console.log("Dish");
                            var check = $(this).is(":checked");
                            var comp = $(this).attr("complexdish");
                            var dish = $(this).val();
                            dishCourses = parseInt($(this).attr("course")) + 1;
                            if (check) {
                                dishOrdered++;
                                var dishP = {};
                                dishP.Quantity = 1;
                                dishP.DishId = dish;
                                dishP.Date = fullDate;
                                dishP.ComplexId = comp;
                                dishP.IsComplex = true;
                                dishP.DishCourse = $(this).attr("course");
                                UserDayDish.push(dishP);
                            }
                            // console.log(comp+"   "+dish + "   " + check);
                        });
                        if (dishOrdered != dishCourses) {
                            //console.log(dishOrdered + "   " + dishCourses);
                            alert("Please choose all dishes in complex");
                            flag = false;
                            return;
                        }
                    }
                    //var com = $(this).attr("complex");
                    //console.log(com + "  " + val);
                });
                if (flag) {
                    console.log(UserDayDish);
                    console.log(UserDayComplex);
                    $.ajax({
                        type: "POST",
                        data: res = { UserDayDish, UserDayComplex },

                        url: "/UserDayDishes/SaveDayComplex",
                        success: function (data) {
                            // alert(data);
                            // $('#modOrderSuccess').modal('show');
                            //var day = $(".tab-pane.fade.show.active").attr("data-dayindex");
                            //reloadDay(day);
                            showOrderResult(data);
                        }
                    });
                }

            });

            $(document).on('click', '.sendMany', function (event) {
                console.log("Post");
                var form = $(this).attr("data-form");
                console.log("Post"+form);
                console.log($("[data-form='"+form+"']"));
                $.ajax({
                    url: '/UserDayDishes/SaveDayComplex',
                    type: 'post',
                    dataType: 'json',
                    data: $("[data-form='" + form + "']").serialize(),
                    success: function (data) {
                        showOrderResult(data);
                    }
                });
                
            });



        });





    </script>
}

