@inject CateringPro.Core.SharedViewLocalizer Localizer
@{
    ViewData["Title"] = @Localizer["ManagingUserCards"];
    Layout = null;

}


<!doctype html>
<html lang="en">

<head>
    <link rel="stylesheet" href="~/css/service.css">
    <link rel="stylesheet" href="~/css/bootstrap.min.css" />
</head>
<body>
    <header class="main-header">

        <h1>@ViewData["Title"]</h1>

    </header>

    <div class="container card-service">
        <div id="nfc_isoffline" class="row container-state bg-danger text-white" style="display: none;">
            <div class="col-4 container-state">
                <span id="nfc_isoffline">
                    @Localizer["NFC Reader Offline"]
                </span>
                <span id="error-offline" class="service-status error"></span>
            </div>
            <div class="col-4 container-state">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" ">URL</span>
                    </div>
                    <input id="nfcurl" class="form-control" value="wss://localhost:44360/ws" />
                </div>


            </div>
            <div class="col-4 container-state">
                <button id="connectnfc" class="btn btn-info">@Localizer["Connect NFC"]</button>
            </div>
        </div>
        <div id="nfc_isonline" class="row bg-success text-white" style="display: none;">
            <div class="col-4 container-state">
                <img id="nfc_image" src="~/images/acr122u.png" style="width:50px;height:50px;" />

            </div>
            <div class="col-4 container-state">
                <span class="service-status online">
                    <span id="nfc_readername"></span>
                    @Localizer["NFC Reader Online"]
                </span>

                <span id="error-online" class="service-status error"></span>
            </div>
            <div class="col-4 container-state">
                <span>@Localizer["Scan card at any time to detect user"]</span>

            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div id="card-info" class="container">

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div id="card-user-info" class="container">

                </div>
            </div>
        </div>
        <div class="row user-card-search justify-content-end my-2">
            <div class="col-6">
                <div id="custom-search-input">
                    <div class="input-group">
                        <input type="text" id="search-val" class="form-control input-lg" placeholder="Search" />
                        <span class="input-group-btn">
                            <button class="btn btn-info btn-lg search-card-btn" id="search-card-btn" type="button">
                                <span class="fa fa-search" aria-hidden="true"></span>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-12">
            <div id="users-cards-content" class="container users-cards-content">

            </div>
        </div>
    </div>


    <script src="../js/jquery.min.js"></script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="../js/resources.js"></script>
    <script src="../js/site.js"></script>
    <script src="../js/nfcsocket.js"></script>

    <script>
        $(function () {
            var elnfc_online = $("#nfc_isonline");
            var elnfc_offline = $("#nfc_isoffline");
            elnfc_online.hide();
            elnfc_offline.show();
            var baseUrl = '/Service';
            const key_url = 'nfcurl';
            var timer_checknfcstate;
            $('#nfcurl').val(localStorage[key_url] || 'wss://localhost:44360/ws');

            var nfcsock;
            $('#connectnfc').click(function (e) {
                $('#connectnfc').prop('disabled', true);
                e.preventDefault();
                if (localStorage[key_url])
                    localStorage.removeItem(key_url);
                localStorage[key_url] = $('#nfcurl').val();
                nfcsock = new nfc_socket($('#nfcurl').val(),
                    function (data) {
                        console.log(data);
                    },
                    function (cmd, event) { 
                        console.log(cmd);
                        console.log(event);
                        //if (cmd === 'open') {
                        //    nfcsock.getstatus(function () { });
                        //}
                    }
                );
                nfcsock.connect();
                nfcsock.on('status', function (msg) {
                    showNfcInfo(msg);
                });
                nfcsock.on('cardreaded', fillCardScan);
                nfcsock.on('error', function (msg) {
                    $('#connectnfc').prop('disabled', false);
                    dialog_error(msg);
                });
                nfcsock.on('state', function (msg) {

                    check_statenfc(msg);
                    showNfcInfo(msg);

                });

            });
            function check_statenfc(msg) {
                if (msg && msg.Isreaderconnected) {
                    if (timer_checknfcstate)
                        clearTimeout(timer_checknfcstate);
                }
                else {
                    if (!timer_checknfcstate)
                        check_nfc();
                }
            }
            function check_nfc() {
                console.log('checknfc');
                if (nfcsock.issocketconnected()) {
                    nfcsock.getstatus();
                }
                timer_checknfcstate = setTimeout(check_nfc, 10000);
            }
            function LoadCards() {

                var url = `/Service/CardsList/?searchcriteria=${$('#search-val').val()}`;
                $('#users-cards-content').load(url, function () { attachEvents(); });
                // $('#table-content').load(href + 'searchcriteria=' + $('#search-val').val());

            }
            function attachEvents() {
                $('#users-cards-content').find(".burn-card").click(function (e) {
                    e.preventDefault();
                    burnProcess($(this).attr('data-id'));
                });
            }

            $.ajaxSetup({ cache: false });
            $('#search-card-btn').click(function (e) {
                e.preventDefault();
                LoadCards();
            })

            $('#search-val').keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    LoadCards();
                }
            });
            LoadCards();
            function burnProcess(userid) {

                if (!nfcsock || !nfcsock.NFCReady) {
                    dialog_error('NFC ще не підключено.');
                    return;
                }
                promise_dialog_yes_no('Підтвердіть дію. <p/> В рузультаті цієї операції, попередня картка буде недійсна.  <p/> Картка NFC буде перезаписана.')
                    .then(data => fetch(
                        `${baseUrl}/GenUserCardToken?userId=${userid}`,
                        { method: 'GET' }
                    ))
                    .then(response => response.json())
                    .then(json => {
                        if (!json.isSuccess)
                            throw "Error generating token";
                        return nfcsock.writecard(json.cardTag);
                    })
                    .then(data => {
                        console.log(data);
                        if (!data.IsSuccess) {
                            throw "Error writing";
                        }
                        return fetch(
                            `${baseUrl}/GenUserCardTokenConfirm?userId=${userid}&token=${data.Cardtag}`,
                            { method: 'GET' }
                        );
                    })
                    .then(data => {
                        console.log(data);
                        dialog_announcement("Успішно.");
                    })
                    .catch(error => {
                        dialog_error(error);
                        console.error('error:', error)
                    });
            }
            function showNfcInfo(msg) {
                $('#connectnfc').prop('disabled', false);
                if (msg && msg.Isreaderconnected == true) {
                    elnfc_online.show();
                    elnfc_offline.hide();
                    $('#nfc_readername').text(msg.Readername);
                }
                else {
                    elnfc_online.hide();
                    elnfc_offline.show();
                }
            }
            function fillCardScan(carddata) {
                //$('#card-info').empty();
                var token = carddata.Cardtag;
                var addclass = '';
                var askdetails = true;
                if (carddata.Cardtag === undefined) {
                    token = "ERROR READING";
                    addclass = 'bg-danger text-white';
                    askdetails = false;
                }
                else if (carddata.Cardtag.length == 0) {
                    token = "Card is empty";
                    addclass = 'bg-warning text-dark';
                    askdetails = false;
                };
                var divcard = $(`<div class="row user-welcome bg-info text-white" >
                                                     <div class="col-4 card-info-scan">
                                                        <span class="card-info-scan" >@Localizer["Card Details"]</span>
                                                    </div>
                                                    <div class="col-8 card-info-scan ${addclass}">
                                                        <span class="card-info-scan" >${token}</span>
                                                    </div>
                                                </div>
                                                <div id="user-card-details-temp" class="row user-card-details" >
                                                    <div class="col-4 card-info-scan">
                                                         <span class="card-info-scan" >..Fetchind user data</span>
                                                     </div>
                                                </div>`);

                $('#card-info').prepend(divcard);
                $(divcard).delay(7000).animate({
                    height: '-=100px'
                }, 300, function () { $(divcard).remove() });

                if (!askdetails) {
                    return;
                }
                fetch(
                    `${baseUrl}/UserCardDetails?token=${carddata.Cardtag}`,
                    { method: 'GET' }
                )
                    .then(response => response.text())
                    .then(data => {
                        console.log(data);
                        $("#user-card-details-temp").remove();
                        var userdata = $(data);
                        $('#card-user-info').prepend(userdata);
                        $(userdata).delay(7000).animate({
                            height: '-=100px'
                        }, 300, function () { $(userdata).remove() });
                    })
                    .catch(error => console.error('error:', error))
            }
        });
    </script>


</body>
</html>